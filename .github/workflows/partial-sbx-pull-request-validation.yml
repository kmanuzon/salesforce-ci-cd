name: Partial SBX PR Validation
concurrency: 'partial-sbx'

on:
  pull_request:
    branches: develop

jobs:
  validate-build:
    runs-on: ubuntu-latest
    environment: PARTIAL_SBX
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # This step will check for Salesforce metadata changes, if there are none
      # then skip validate/deploy builds.
      # Make sure the order of arguments is correct in the command, i.e. git diff DESTINATION_BRANCH SOURCE_BRANCH
      - name: 'Check for Metadata Change'
        id: 'check-metadata-change'
        run: |
          if [ -n "$(git --no-pager diff --diff-filter=ACMRTUXB --name-only remotes/origin/${{ github.base_ref }} remotes/origin/${{ github.head_ref }} | grep ^force-app)" ]; then
            echo "::set-output name=has-metadata-change::true"
            echo
            echo 'Found metadata change. Continue build.'
          else
            echo "::set-output name=has-metadata-change::false"
            echo "::notice title=Validate/Deploy Build Notice::No metadata change found. Skip build."
            echo
            echo 'No metadata change found. Skip build.'
          fi

      - name: 'Install SFDX CLI'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-x64.tar.xz -C sfdx-cli --strip-components 1
          echo "$( pwd )/sfdx-cli/bin" >> $GITHUB_PATH

      - name: 'Install SFDX-Git-Delta Plugin'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: echo "y" | sfdx plugins:install sfdx-git-delta

      - name: 'State Check'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: |
          echo === GIT STATUS
          git status --verbose --branch --long
          echo
          echo === GIT BRANCH
          git branch -vv --all
          echo
          echo === GITHUB_WORKFLOW: The action name
          echo ${{ github.workflow }}
          echo
          echo === GITHUB_ACTOR: Ran by username
          echo ${{ github.actor }}
          echo
          echo === GITHUB_REPOSITORY
          echo ${{ github.repository }}
          echo
          echo === GITHUB_EVENT_NAME
          echo  ${{ github.event_name }}
          echo
          echo === GITHUB_SHA
          echo ${{ github.sha }}
          echo
          echo === GITHUB_REF
          echo ${{ github.ref }}
          echo
          echo === GITHUB_REF_NAME
          echo ${{ github.ref_name }}
          echo
          echo === GITHUB_REF_TYPE: branch or tag
          echo ${{ github.ref_type }}
          echo
          echo === GITHUB_HEAD_REF: Source of the change
          echo ${{ github.head_ref }}
          echo
          echo === GITHUB_BASE_REF: Target of the change
          echo ${{ github.base_ref }}
          echo
          echo === NODE VERSION
          node -v
          echo
          echo === SFDX CLI VERSION
          sfdx --version
          echo
          echo === SFDX PLUGINS
          sfdx plugins --core

      - name: 'Decrypt Server Key'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: openssl enc -nosalt -aes-256-cbc -d -in build/server.key.enc -out server.key -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}

      - name: 'Authorize User in Org'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: sfdx force:auth:jwt:grant --clientid=${{ secrets.ORG_CONSUMER_KEY }} --username=${{ secrets.ORG_USERNAME }} --jwtkeyfile server.key --instanceurl=${{ secrets.ORG_INSTANCE_URL }} --setdefaultusername --setalias=target-org

      - name: 'Org List'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: sfdx force:org:list --all --verbose

      - name: 'Generate Delta Diff'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: sfdx sgd:source:delta --source=force-app --output=build/artifact --to=remotes/origin/${{ github.head_ref }} --from=remotes/origin/${{ github.base_ref }}

      - name: 'Package XML Output'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: cat build/artifact/package/package.xml

      - name: 'Parse and Store Unit Tests to Run'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: |
          echo "SFDC_UNIT_TESTS=$( tr '\n' ',' < build/unit-tests.txt )" >> $GITHUB_ENV

      - name: 'Validate in Org'
        if: steps.check-metadata-change.outputs.has-metadata-change == true
        run: sfdx force:source:deploy --verbose --wait=120 --manifest=build/artifact/package/package.xml --targetusername=target-org --testlevel=RunSpecifiedTests --runtests=${{ env.SFDC_UNIT_TESTS }} --checkonly
